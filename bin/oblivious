#!/usr/bin/env bash
set -e # <- exit on errors

help() {
  echo "
Description:
oblivious is a bit of glue built around org-publish. It enables you to quickly set up a nice little website or blog with bash, emacs and orgmode.

Obliviously you have no idea how to use this, you wouldn't be here otherwise.

Here are some pointers:

Usage: 
  oblivious [command]

Commands:
  init      Inject org-publish config into your ~/.doom.d/config.el or ~/.emacs.d/init.el
  sync      Load settings from your readme.org
  fetch     Fetches resources you have defined (css and fonts)
  build     Runs org-publish and creates your website
  observe   TODO, but I really need to add this one: watch for file changes in the parent directory and its children, autorebuild
  release   Rebuild and add a signed commit with automated commit message, etc.
  *         Display this Help
"
  exit 1
}

# get working directory (which is assumed to be the directory above the oblivious script) 
gwd() {
  # from stackoverflow Nr. 630372:
  MY_PATH="`dirname \"$0\"`"              # relative
  MY_PATH="`( cd \"$MY_PATH\" && pwd )`"  # absolutized and normalized
  if [ -z "$MY_PATH" ] ; then
    # error; for some reason, the path is not accessible
    # to the script (e.g. permissions re-evaled after suid)
    exit 1  # fail
  fi
  echo "$MY_PATH" | sed 's!/bin!!'
}

sync() {
    if [[ -f "$readme_file" ]]; then
      echo "emacs --batch --eval \"(require 'org)\" --eval '(org-babel-load-file (expand-file-name \"$readme_file\"))' --eval '(org-babel-tangle-file (expand-file-name \"$readme_file\"))'" | sh
      rm $(echo $readme_file | sed 's/readme.org/readme.el/')
    else
      echo -e "Error! Could not find expected readme file under: \n$readme_file"
      echo    "Please make sure the file exists and retry."
      exit 1
    fi
    # make sure the .gitignore file is set up:
    for f in ./bin/.git_user_info ./bin/.get_resources ./.config ./public ./static ./templates;
    do
      grep -qxF "$f" $(gwd)/.gitignore || echo "$f" >> $(gwd)/.gitignore
    done
    $(gwd)/bin/.git_user_info
}

inject_publish_config() {
  local target=$1
  grep -qxF "(load \"$publish_config\")" $target || echo -e "\n;; oblivious org-publish config (autogenerated by 'oblivious init') \n(load \"$publish_config\")" >> $target
}

init() {
  mkdir -p {assets,.config,index,partials,posts,public,static,templates}
  sync
  if [ -d "$HOME/.doom.d/" ]; then
    inject_publish_config "$HOME/.doom.d/config.el"
  elif [ -d "$HOME/.emacs.d/" ]; then
    inject_publish_config "$HOME/.emacs.d/init.el"
  fi
}

fetch() {
  if [[ -f "$get_resources" ]]; then
    $get_resources
  else
    echo -e "Error! Could not find expected resource file under: \n$get_resources \n"
    echo -e "Please make sure you have \n  1) set up some external resources to download in $readme_file \n     (see the readme.org online for examples)\n  2) executed \`oblivious sync\`"
    exit 1
  fi
}

build() {
  rm -rf $(gwd)/public/{*/.*}
  emacs -q -u "$(id -un)" --batch --eval "(load user-init-file)" --eval "(org-publish \"$project_name\" t)"
}

release() {
  echo 'release should probably do something other than build, write your own script, containing stuff such as gpg signing..'
  build
}

readme_file="$(gwd)/readme.org"
get_resources="$(gwd)/bin/.get_resources"
publish_config="$(gwd)/.config/org-publish.el"
project_name="$(gwd | rev | cut -d'/' -f1 | rev)"

case "$1" in
  init)
    if [ -f "$(gwd)/bin/.init" ]; then $(gwd)/bin/.init; else init; fi;;
  sync)
    if [ -f "$(gwd)/bin/.sync" ]; then $(gwd)/bin/.sync; else sync; fi;;
  fetch)
    if [ -f "$(gwd)/bin/.fetch" ]; then $(gwd)/bin/.fetch; else fetch; fi;;
  build)
    if [ -f "$(gwd)/bin/.build" ]; then $(gwd)/bin/.build; else build; fi;;
  release)
    if [ -f "$(gwd)/bin/.release" ]; then $(gwd)/bin/.release; else release; fi;;
  *)
    help;;
esac
